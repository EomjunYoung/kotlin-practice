- 람다식이란?

람다식, 또는 람다함수는 프로그래밍 언어에서 사용되는 개념으로 익명함수를 지칭하는 용어

함수형 프로그래밍을 목적으로 하지않더라도 코드의 간결함을 목적으로 자주사용되며,
함수형 프로그래밍에서는 람다함수가 고차 함수의 매개변수나 리턴값으로 사용되므로
더욱더 중요함

코틀린에서의 함수는
fun 함수이름(매개변수) { 함수내용 } 인데,

이를 람다함수로 변환하면 fun과 함수이름을 명시하지않고 축약함
{ 매개변수 -> 함수내용 } 으로함. 규칙을 정리하면,

1. 람다함수는 항상 {}으로 감싸서 표현
2. {}안에 ->표시가 있으며, -> 왼쪽은 매개변수 오른쪽은 함수내용
3. 매개변수 타입을 선연해야 하며, 추론할 수 있을때는 생략가능
4. 함수의 반환값은 함수 내용의 마지막 표현식이다.

    run{println("람다함수 바로 실행")}//매개변수에 넣지않고 바로실행할때 run메소드를 사용

- 고차(고계)함수란?

일반적인 함수는 매개변수에 값을 리턴하는 방식인데, 고차함수는 매개변수나 리턴값에 함수를
이용할 수 있음

코틀린에서는 일반적인 데이터타입 선언을 :를 기준으로 좌측엔 변수를 우측엔 타입을 명시함
함수 타입 선언도 이와 비슷하게 한것임.. argFun을 변수, (int) -> int를 타입으로 명시한 것임

(int) -> int는 람다함수내용과 비슷하며.. int타입 매개변수 하나와 리턴타입이 int타입이란 것임

//코틀린에
fun hoFun(x1: Int, argFun: (Int) -> Int){
    val result = argFun(10)
    println("x1: $x1, someFun1: $result")
}



